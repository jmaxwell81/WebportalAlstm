<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $uibModal, spUtil) {
  var c = this;
	var widgetClass = $scope.widget.directiveName;


	$scope.$on('spModel.uiActionComplete', function() {
		closeModal();
		update();
	});


	$scope.openFormModal = function($event, delegate) {
		c.server.get({
			action: 'get_embedded_form',
			sys_id: delegate ? delegate.id : -1
		}).then(function(r) {
			$scope.embeddedForm = r.data.embeddedForm;
		});

		$scope.modal = $uibModal.open({
			appendTo: $('.'+widgetClass),
			templateUrl: "wowDelegateForm.html",
			windowClass: 'form-modal',
			scope: $scope
		});
	}


	$scope.openDeleteModal = function ($event, delegate) {
		$scope.currentDelegate = delegate;

		$scope.modal = $uibModal.open({
			appendTo: $('.'+widgetClass),
			templateUrl: "wowDeleteDelegate.html",
			windowClass: 'delete-modal',
			scope: $scope
		});
	}


	$scope.deleteDelegate = function(delegate) {
		if (!delegate)
			return;

		$scope.modal.close();
		$scope.loading = true;

		c.server.get({
			action: 'delete_delegate',
			sys_id: delegate.id
		}).then(function (r) {
			c.data.delegates = r.data.delegates;
			$scope.loading = false;
			spUtil.addInfoMessage("${wow_delegate_deleted}");
		});
	};


	var closeModal = $scope.closeModal = function($event) {
		if ($scope.modal)
			$scope.modal.close();
	};


	function update() {
		$scope.loading = true;

		c.server.update().then(function() {
			$scope.loading = false;
		})
	}

}
]]></client_script>
        <controller_as>c</controller_as>
        <css>$cell-padding: 1.25rem;

@include wow-panel();

a {
  cursor: pointer;
}

.btn-create-delegate {
  background: darken($panel-bg, 10%);
  border: none;
  font-weight: 600;
  font-size: 1rem;
}

section {
  transition: transform .4s ease-in-out;

  @media screen and (max-width: $screen-xs-max) {
    position: relative;

    ::-webkit-scrollbar {
      -webkit-appearance: none;
      height: 3px;
    }

    ::-webkit-scrollbar-thumb {
      border-radius: 3px;
      background-color: rgba(0, 0, 0, .2);
      -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);
    }
  }

  &amp;.no-delegates {
    align-items: center;
    color: $text-muted;
    display: flex;
    flex-direction: column;
    font-size: 2rem;
    height: 250px;
    justify-content: center;
    text-align: center;

    i {
      font-size: 3em;
    }

    .btn {
      @include wow-button();
      margin-top: 1rem;
    }
  }
}

.actions {
  display: flex;
  justify-content: flex-end;
  margin-top: 2rem;

  .btn {
    @include wow-button();
  }
}

.loading-spinner {
  @include wow-spinner($brand-primary);

  bottom: calc(50% - 20px);
  left: calc(50% - 20px);
  position: absolute;
  text-align: center;
  width: 40px;
  z-index: 1;
}

.is-loading {
  opacity: 0.25;
  pointer-events: none;
}

.table-responsive {
  border: none;
}

table {
  border: none;
  border-radius: $border-radius;
  list-style: none;
  margin: 2rem 0;
  padding: 0;
  width: 100%;

  thead {
    border-bottom: 1px solid $text-muted;

    tr {
      height: 2rem;
    }

    th {
      border: none;
      color: $text-muted;
      font-size: .9rem;
      font-weight: 600;
      padding: $cell-padding 0;
      text-transform: uppercase;

      @media screen and (max-width: $screen-xs-max) {
        &amp;:not(:last-child) {
          padding-right: $cell-padding;
        }
      }
    }
  }

  tbody {
    tr {
      height: 3.2rem;
      border-bottom: 1px solid darken($panel-bg, 10%);
      &amp;:last-child { border: none }
    }

    td {
      padding: $cell-padding 0;
      border: none;

      @media screen and (max-width: $screen-xs-max) {
        &amp;:not(:last-child) {
          padding-right: $cell-padding;
        }
      }

      i {
        font-size: 1.5rem;
      }

      .icon-wrapper {
        display: flex;
        align-items: center;

        i {
          color: lighten($text-muted, 10);
          font-size: 1.2rem;
          margin-right: .5em;
        }

        &amp;.centered {
          justify-content: center;
        }
      }
    }
  }
}

.delegate {
  width: 100%;
  margin: 1.5rem 0;
  width: 100%;
}

@include wow-modal();

.form-modal {
  text-align: left;

  .modal-dialog {
    max-width: 750px;
  }

  .panel {
    background-color: transparent;
    border: none;
    box-shadow: none;
    padding: 0;
  }

  .panel-heading {
    display: none;
  }

  .panel-footer {
    .btn {
      @include wow-button();
    }
  }

  // hide the "Delegate" table title
  fieldset:nth-of-type(1) {
    &gt;*:first-child {
      legend {
        display: none;
      }
    }
  }
}

.delete-modal {
  text-align: center;

  .modal-dialog {
    max-width: 250px;
  }

  .btn:not(.cancel) {
    @include wow-button();
    color: $white;
    margin: .5rem 0;
    width: 100%;

    svg {
      fill: $white;
    }
  }
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description>Copyright Monochrome Ltd</description>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id/>
        <internal>false</internal>
        <link/>
        <name>Wow Delegates</name>
        <option_schema>[{"name":"title","section":"Presentation","default_value":"","label":"Title","type":"string"},{"displayValue":"Instance with Menu","name":"menu","section":"Presentation","label":"Menu","type":"reference","value":"sp_instance_menu","ed":{"reference":"sp_instance_menu"}}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	var util = new WowUtil();
	var userId = gs.getUserID();

	options.title = options.title ? gs.getMessage(options.title) : null;
	options.menu = options.menu || null;

	if (input) {
		switch (input.action) {
			case 'delete_delegate':
				deleteDelegate(input.sys_id);
				break;

			case 'get_embedded_form':
				data.embeddedForm = $sp.getWidget('widget-form', {
					omitHeaderOptions: true,
					hideRelatedLists: true,
					sys_id: input.sys_id,
					table: 'sys_user_delegate',
					view: 'portal'
				});
				return;
		}
	}

	data.delegates = getDelegates();


	function getDelegates(startRow, itemsPerPage) {
		var delegates = [];

		var gr = new GlideRecord('sys_user_delegate');
		gr.addQuery('delegate', userId)
			.addOrCondition('user', userId);
		gr.orderBy('delegate');

		if (itemsPerPage)
			gr.chooseWindow(startRow, itemsPerPage);

		gr.query();

		while (gr.next()) {
			delegates.push({
				id: gr.getUniqueValue(),
				canEdit: gr.getValue('user') == userId,
				delegate: gr.getDisplayValue('delegate'),
				user: gr.getDisplayValue('user'),
				start: gr.getDisplayValue('starts'),
				end: gr.getDisplayValue('ends'),
				approvals: Number(gr.getValue('approvals')),
				assignments: Number(gr.getValue('assignments')),
				notifications: Number(gr.getValue('notifications')),
				ku_incidents: Number(gr.getValue('u_key_user_incidents')),
				ku_requests: Number(gr.getValue('u_key_user_requests'))
			});
		}

		return delegates;
	}


	function deleteDelegate(sys_id) {
		var gr = new GlideRecord('sys_user_delegate');

		if (gr.get(sys_id))
			gr.deleteRecord();
	}


})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>elgarsi</sys_created_by>
        <sys_created_on>2018-08-09 09:04:43</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e8430bf1dbb31b00ec3ab9836b961959</sys_id>
        <sys_mod_count>247</sys_mod_count>
        <sys_name>Wow Delegates</sys_name>
        <sys_package display_value="Wow Portal" source="x_mono2_wow">c22adc75dba633400ef45682ca961996</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Wow Portal">c22adc75dba633400ef45682ca961996</sys_scope>
        <sys_update_name>sp_widget_e8430bf1dbb31b00ec3ab9836b961959</sys_update_name>
        <sys_updated_by>DI</sys_updated_by>
        <sys_updated_on>2020-03-19 16:03:48</sys_updated_on>
        <template><![CDATA[<div class="panel">

  <div class="loading-spinner" ng-show="loading">
    <div class="blob"></div>
    <div class="blob"></div>
    <div class="blob"></div>
  </div>

  <h1 ng-if="::options.title">{{::options.title}}</h1>

  <widget id="wow-navigation" options="{menu: options.menu}"></widget>

  <section ng-class="{'hidden': data.delegates.length == 0, 'is-loading': loading}">

    <div class="actions">
      <button ng-click="openFormModal($event)" class="btn btn-default btn-create-delegate">
        ${wow_create_delegate}
      </button>
    </div>

    <div class="table-responsive">
     <table class="table">
        <thead>
          <tr>
            <th>${wow_start}</th>
            <th>${wow_end}</th>
            <th>${wow_user}</th>
            <th>${wow_delegate}</th>
            <th class="text-center">${wow_approvals}</th>
            <th class="text-center">${wow_assignments}</th>
            <th class="text-center">${wow_notifications}</th>
            <th class="text-center">${wow_ku_incidents}</th>
            <th class="text-center">${wow_ku_requests}</th>
            <th class="text-center">${wow_edit}</th>
            <th class="text-center">${wow_delete}</th>
          </tr>
        </thead>

        <tbody>
          <tr ng-repeat="delegate in data.delegates track by $index" class="delegate">

            <td>{{delegate.start | wowDate}}</td>

            <td>{{delegate.end | wowDate}}</td>

             <td>
              <span class="icon-wrapper">
                <!--<i class="material-icons">person_outline</i>-->
                {{delegate.user}}
              </span>
            </td>

            <td>
              <span class="icon-wrapper">
                <!--<i class="material-icons">person_outline</i>-->
                {{delegate.delegate}}
              </span>
            </td>
            
            <td class="text-center">
              <i ng-if="delegate.approvals" class="material-icons">done</i>
            </td>

            <td class="text-center">
              <i ng-if="delegate.assignments" class="material-icons">done</i>
            </td>

           <td class="text-center">
              <i ng-if="delegate.notifications" class="material-icons">done</i>
            </td>

            <td class="text-center">
              <i ng-if="delegate.u_ku_incidents" class="material-icons">done</i>
            </td>

            <td class="text-center">
              <i ng-if="delegate.u_ku_requests" class="material-icons">done</i>
            </td>

            <td class="text-center text-muted">
              <span ng-if="delegate.canEdit" ng-click="openFormModal($event, delegate)">
                <i class="material-icons">mode_edit</i>
              </span>
            </td>

            <td class="text-center text-muted">
              <span ng-if="delegate.canEdit" ng-click="openDeleteModal($event, delegate)">
                <i class="material-icons">delete</i>
              </span>
            </td>

          </tr>
        </tbody>
      </table>
    </div>
  </section>

  <section ng-class="{'hidden': data.delegates.length > 0}" class="no-delegates">
    ${wow_no_delegates}
    <button ng-click="openFormModal($event)" class="btn btn-default">
      ${wow_create_delegate}
    </button>
  </section>

</div>]]></template>
    </sp_widget>
</record_update>
