<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $http, $timeout, $location, spScUtil, nowAttachmentHandler, spUtil, $log, spAriaUtil, $q, spAtf, spModal, spAriaFocusManager) {
	var c = this;
	c.showSpecialInstructions = false;
	c.showDeliveryAddr = true;

	c.updateDetails = function() {
		c.deliverTo = c.data.cart.delivery_address;
		c.special_instructions = c.data.cart.special_instructions;
		c.requestedFor = {
			displayValue: c.data.cart.requested_for_display_name,
			value: c.data.cart.requested_for,
			name: 'requested_for'
		};
		
		c.requestor = c.data.requestor;
		c.primaryPhone = c.requestor.phone;
		c.secondaryPhone = c.requestor.secondaryPhone;
		c.emailAddress = c.requestor.email;
		c.contactTime = c.requestor.contactTime;
		c.serviceLocation = {
			displayValue: c.requestor.location.displayValue,
			value: c.requestor.location.value
		};
	}
	
	
	spAtf.init().then(function(atf) {
		$scope._atf = atf;
		atf.expose('checkout_util', checkoutUtil);
	});

	var checkoutUtil = {
		checkout: function() {
			var defer = $q.defer();
			$scope.c.triggerCheckout();
			var cleanUp;
			var isOrderGuide = c.data.action == 'order_guide';
			if(isOrderGuide)
				cleanUp = $scope.$on('$sp.sc_order_guide.submitted', function(o, result) {
					$timeout(function() {
						cleanUp();
						defer.resolve(result);
					}, 10);
				});
			else
				cleanUp = $scope.$on('$sp.sc_cat_item.submitted', function(o, result) {
					$timeout(function() {
						cleanUp();
						defer.resolve(result);
					}, 10);
				});
			return defer.promise;
		}
	}

	$scope.$on('dialog.upload_too_large.show', function(e){
		$log.error($scope.m.largeAttachmentMsg);
		spUtil.addErrorMessage($scope.m.largeAttachmentMsg);
	});

	$scope.m = $scope.data.msgs;
	$scope.checkOutMsg = $scope.m.checkOutMsg;
	$scope.checkoutPopupTitle = $scope.m.checkoutPopupTitle;
	var ah = $scope.attachmentHandler = new nowAttachmentHandler(function (attachments, action) {
		$scope.attachments = attachments;
		if (action === "added")
			$scope.setFocusToAttachment();
		if (action === "renamed")
			spAriaUtil.sendLiveMessage($scope.m.renameSuccessMsg);
		if (action === "deleted")
			spAriaUtil.sendLiveMessage($scope.m.deleteSuccessMsg);
		spUtil.get($scope, {action: "from_attachment"});
	}, function (error) {
		spUtil.addErrorMessage(error.msg + error.fileName);
	});

	ah.setParams('sc_cart', c.data.cart.sys_id, 1024 * 1024 * $scope.data.maxAttachmentSize);

	$scope.attachmentHandler.getAttachmentList();

	$scope.confirmDeleteAttachment = function(attachment) {
		spModal.confirm($scope.data.msgs.delete_attachment).then(function() {
			$scope.attachmentHandler.deleteAttachment(attachment);
			$scope.setFocusToAttachmentButton();
		});
	}

	c.changeShippingInfo = function() {
		if (c.data.action !== 'order_now')
			c.server.get({
				action: "change_shipping_info",
				requestedFor: c.requestedFor.value,
				special_instructions: c.special_instructions,
				deliverTo: c.deliverTo,
				cart: {name: c.data.cart.name}
			}).then(function(response) {
				c.data.cart = response.data.cart;
				c.updateDetails();
			});
	}

	c.canCheckout = function() {
		return !c.checkoutInProgress && c.requestedFor.value && c.deliverTo && c.primaryPhone && c.emailAddress && c.currentLocation;
	}

	c.triggerCheckout = function() {
		var newURL;
		c.checkoutInProgress = true;

		// build deliver to for checkout
		var deliverTo = c.deliverTo + "\r\n";

		if (c.primaryPhone)
			deliverTo += "\r\nPreferred telephone: " + c.primaryPhone;
		
		if (c.secondaryPhone)
			deliverTo += "\r\nSecondary telephone: " + c.secondaryPhone;

		if (c.emailAddress)
			deliverTo += "\r\nPreferred email: " + c.emailAddress;

		if (c.currentLocation)
			deliverTo += "\r\nCurrent location: " + c.currentLocation;

		if (c.serviceLocation)
			deliverTo += "\r\nService location: " + c.serviceLocation.displayValue;

		if (c.contactTime)
			deliverTo += "\r\nPreferred contact time: " + c.contactTime;

		var additionalParms = {
			'sysparm_requested_for': c.requestedFor.value,
			'special_instructions': c.special_instructions,
			'delivery_address': deliverTo
		};
		if (c.data.parentParams) {
			additionalParms.sysparm_parent_sys_id =  c.data.parentParams.sysparm_parent_sys_id;
			additionalParms.sysparm_parent_table = c.data.parentParams.sysparm_parent_table;
		}
		if (c.data.action == 'order_now') {
			spScUtil.orderNow(c.data.item.sys_id, c.data.item.quantity, c.data.item.fields, c.data.item.newRecordID, additionalParms).then(function(response) {
				var a = response.data.result;
				if (!$scope.data.parentParams)
					$scope.$emit("$$uiNotification", a.$$uiNotification);
				$scope.$emit("$sp.sc_cat_item.submitted", a);
				if (c.options.auto_redirect == 'false') {
					$rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
					spUtil.addInfoMessage($scope.m.requestSubmitted);
					return;
				} else if (!$scope._atf) {
					newURL = $location.search('id=sc_request&is_new_order=true&table=sc_request&sys_id=' + a.sys_id);
					spAriaFocusManager.navigateToLink(newURL.url());
				}
			});
		} else if (c.data.action == 'order_now_wishlisted_item') {
			spScUtil.orderWishlistedItem(c.data.item.sys_id, c.data.item.quantity, c.data.item.fields, c.data.item.newRecordID, additionalParms).then(function(response) {
				var a = response.data.result;
				if (!$scope.data.parentParams)
					$scope.$emit("$$uiNotification", a.$$uiNotification);
				$scope.$emit("$sp.sc_cat_item.submitted", a);
				$rootScope.$broadcast("$sp.service_catalog.wishlist.update");
				if (c.options.auto_redirect == 'false') {
					$rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
					spUtil.addInfoMessage($scope.m.requestSubmitted);
					return;
				} else {
					newURL = $location.search('id=sc_request&is_new_order=true&table=sc_request&sys_id=' + a.sys_id);
					spAriaFocusManager.navigateToLink(newURL.url());
				}
			});
		}
		else {
			c.data.delivery_address = deliverTo;
			c.data.special_instructions = c.special_instructions;
			c.data.requested_for = c.requestedFor.value;
			var isOrderGuide = c.data.action == 'order_guide';
			c.server.update().then(function(response) {
				c.data.action = null;
				if (isOrderGuide)
					$scope.$emit("$sp.sc_order_guide.submitted", $scope.data.result);
				else
					$scope.$emit("$sp.cart.submitted", $scope.data.result);
				if (c.options.auto_redirect == 'false') {
					$rootScope.$broadcast("$sp.service_catalog.cart.update");
					$rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
					spUtil.addInfoMessage($scope.m.requestSubmitted);
					return;
				}
				else {
					if ($scope.data.result.sys_id)
						$location.search('id=sc_request&is_new_order=true&table=sc_request&sys_id=' + $scope.data.result.sys_id);
					else
						$location.search('id=requests');

					$timeout(function(){
						$rootScope.$broadcast("$sp.service_catalog.cart.update");
						$rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
					})

				}
			});
		}
	}

	$scope.$on("field.change", function(evt, parms) {
		if (parms.field.name == 'requested_for') {
			c.data.cart.requested_for = parms.newValue;
			var getShippingAddrURL = '/api/sn_sc/v1/servicecatalog/cart/delivery_address/' + parms.newValue;
			$http.get(getShippingAddrURL).then(function handleSuccess(response) {
				if (response.data.result) {
					c.deliverTo = response.data.result.trim();
				} else {
					c.deliverTo = '';
				}
				c.changeShippingInfo();
			});

			// check user has permissions for this item
			c.server.get({
				action: 'check_permissions',
				user: c.data.cart.requested_for,
				item: c.data.item.sys_id
			}).then(function(r) {
				if (r.data.requestor) {
					var requestor = r.data.requestor;
					var previousRequestor = c.requestor;
					
					if (r.data.canOrder) {
						c.errorMessage = null;
						updateFields(requestor);
					}
					
					else {
						c.errorMessage = "${wow_[0]_cannot_request_[1]}".replace('[0]', requestor.name).replace('[1]', r.data.item.name);
						updateFields(previousRequestor)
					}
				}
			})
		}
	});
	
	function updateFields(requestor) {
		c.requestor = requestor;
		c.requestedFor.displayValue = requestor.name;
		c.requestedFor.value = requestor.id;
		c.primaryPhone = requestor.phone;
		c.secondaryPhone = requestor.secondaryPhone;
		c.emailAddress = requestor.email;
		c.contactTime = requestor.contactTime;
		c.serviceLocation.value = requestor.location.value;
	}
	
	function resetFields() {
		c.requestedFor.value = "";
		c.deliverTo = "";
		c.primaryPhone = "";
		c.secondaryPhone = "";
		c.emailAddress = "";
		c.contactTime = "";
		c.serviceLocation.value = "";
	}

	c.cancel = function() {
		$rootScope.$broadcast("$sp.service_catalog.cart.cancel_order", true);
	}

	c.allowDeliveryAddress = function () {
		if (c.data.item)
			return c.data.item.request_method != "request"
			return true;
	}

	c.updateDetails();
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.attachment-list {
  max-height: 180px;
  overflow-y: scroll;
  margin-bottom: 10px;
}

.accordion-toggle {
  line-height: 13px;
}

textarea {
  resize: vertical;
}

.select2-additional-display-field {
  padding-right: 5px;
}

.panel-header {
  align-items: center;
  border-bottom: 1px solid darken($panel-bg, 10%);
  display: flex;
  justify-content: space-between;
  padding: 1.5rem;

  .title {
    margin: 0;
  }
}

.panel-body {
  padding: 1.5rem;
}

.panel-footer {
  padding: 1rem;

  .btn {
    @include wow-button();
  }
}

.error-messages {
  background-color: $brand-danger;
  color: $white;
  font-weight: 600;
  font-weight: $font-weight-bold;
  margin: 0 -1px;
  padding: 1rem;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>wow-checkout-modal</id>
        <internal>false</internal>
        <link><![CDATA[function(scope, elem){
    scope.setFocusToAttachment = function () {
		setTimeout(function () {
			var inboxArray = elem.find("a.view-attachment");
			inboxArray.focus();
		}, 100);
	}
	scope.setFocusToAttachmentButton = function () {
		elem.find('.sp-attachment-add')[0].focus();
	}
}
	]]></link>
        <name>Wow Checkout Modal</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	data.action = options.action;
	if (data.action)
		data.item = options.item;
	else
		data.action = 'checkout';

	if (input && input.action == "from_attachment")
		return;

	if (input && input.action == 'check_permissions') {
		data.requestor = getRequestor(input.user);
		data.canOrder = new global.TUNGSDUtils().canUserOrderItem(input.user, input.item);
		data.item = $sp.getCatalogItem(input.item);
		return;
	}
	
	data.requestor = getRequestor(gs.getUserID());

	var cartName = '';
	if (input)
		cartName = input.cart.name;
	else if (options.cart)
		cartName = options.cart.name;

	var m = data.msgs = {};
	m.dialogTitle = gs.getMessage('wow_delete_attachment');
	m.dialogMessage = gs.getMessage('wow_are_you_sure');
	m.dialogOK = gs.getMessage('wow_ok');
	m.dialogCancel = gs.getMessage('wow_cancel');
	m.renameSuccessMsg = gs.getMessage('wow_attachment_renamed');
	m.deleteSuccessMsg = gs.getMessage('wow_attachment_deleted');
	m.delete_attachment = gs.getMessage('wow_confirm_delete_attachment');
	m.requestSubmitted = gs.getMessage('wow_request_submitted_confirmation');
	if (data.item.request_method == "request") {
		m.checkOutMsg = gs.getMessage('wow_request');
		m.checkoutPopupTitle = gs.getMessage('wow_request_confirmation');
	} else {
		m.checkOutMsg = gs.getMessage('wow_checkout');
		m.checkoutPopupTitle = gs.getMessage('wow_order_confirmation');
	}

	data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
	if (isNaN(data.maxAttachmentSize))
		data.maxAttachmentSize = 24;
	m.largeAttachmentMsg = gs.getMessage('wow_invalid_attachment_max_size_{0}', "" + data.maxAttachmentSize + "MB");

	var cartJS;
	if (data.action !== 'order_now') {
		cartJS = new sn_sc.CartJS(cartName, '' + gs.getUser().getID());

		if (input && input.action === "change_shipping_info") {
			cartJS.setSpecialInstructions(input.special_instructions);
			cartJS.setRequestedFor(input.requestedFor);
			cartJS.setDeliveryAddress(input.deliverTo);
		}
	}

	if (input && input.action == 'order_guide') {
		var guideJS = new sn_sc.OrderGuide('' + cartName);
		cartJS = new sn_sc.CartJS('' + cartName);
		for(var i = 0; i < input.item.items.length; i++) {
			guideJS.navigateFromMap(input.item.items[i]);
		}
		cartJS.activateGuide();
		cartJS.setRequestedFor(input.requested_for);
		cartJS.setDeliveryAddress(input.delivery_address);
		cartJS.setSpecialInstructions(input.special_instructions);
		cartJS.setParentParams(input.parentParams);
		var request = cartJS.checkoutGuide();
		data.result = {sys_id: request.request_id, number: request.request_number, table: 'sc_request'};
		$sp.logStat('Checkout Request', 'sc_request', request.request_id);
		return;
	}

	if (input && input.action === 'checkout') {
		var request = cartJS.checkoutCart(true);
		data.result = {sys_id: request.request_id, number: request.request_number, table: 'sc_request'};
		$sp.logStat('Checkout Request', 'sc_request', request.request_id);
		return;
	}

	if (data.action !== 'order_now')
		data.cart = cartJS.getCartDetails(false);
	else
		data.cart = {name: cartName, sys_id: gs.generateGUID(), requested_for: gs.getUser().getID(), requested_for_display_name: gs.getUser().getDisplayName(), delivery_address: sn_sc.CartJS.getRequestedForAddress(gs.getUser().getID())};

	if (options && options.parentParams && options.parentParams.sysparm_parent_table && options.parentParams.sysparm_parent_sys_id && options.parentParams.sysparm_parent_sys_id != -1) { //if parent is passed
			var gr = new GlideRecord('request_parent_mapping');
			gr.get('parent_table', options.parentParams.sysparm_parent_table);
			gr.query();
			if (gr.next()) {
				var parent = new GlideRecord(options.parentParams.sysparm_parent_table);
				parent.get(options.parentParams.sysparm_parent_sys_id);
				if (JSUtil.notNil(parent.getValue(gr.requested_for_field))) {
					data.cart.requested_for = parent.getValue(gr.requested_for_field);
					data.cart.requested_for_display_name = parent.getDisplayValue(gr.requested_for_field);
					data.cart.delivery_address = sn_sc.CartJS.getRequestedForAddress(data.cart.requested_for);
				}
				data.parentParams = options.parentParams;
			}
	}

	if (options && options.requested_for && options.requested_for.id) { //If Passed via options
			data.cart.requested_for = options.requested_for.id;
			data.cart.requested_for_display_name = options.requested_for.displayValue;
			data.cart.delivery_address = sn_sc.CartJS.getRequestedForAddress(options.requested_for.id);
	}

	if (data.request_for) { //if value is changed by user
		var user = GlideUser.getUserByID(data.request_for);
		if (user.exists()) {
			data.cart.requested_for = data.request_for;
			data.cart.requested_for_display_name = user.getDisplayName();
			data.cart.delivery_address = sn_sc.CartJS.getRequestedForAddress(data.request_for);
		}
	}

	data.disable_req_for = sn_sc.CartJS.canViewRF();
	var reqForDispCols = gs.getProperty("glide.sc.request_for.columns");
	if (reqForDispCols && reqForDispCols.length > 0) {
		 reqForDispCols = reqForDispCols.replace(/;/g, ",")
		 reqForDispCols = "name," + reqForDispCols;
	}
	data.reqForDispCols = reqForDispCols || "name";
	data.reqForQuery = gs.getProperty("glide.sc.request_for.query");
	
	function getRequestor(userId) {
		var gr = new GlideRecord('sys_user');

		if (gr.get(userId)) {
			return {
				id: gr.getUniqueValue(),
				contactTime: gr.getDisplayValue('u_best_contact_time'),
				email: gr.getValue('email'),
				name: gr.getDisplayValue('name'),
				location: {
					displayValue: gr.getDisplayValue('location'),
					value: gr.getValue('location')
				},
				phone: gr.getValue('phone'),
				secondaryPhone: gr.getValue('u_secondary_phone')
			};
		}

		return null;
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>mono_se</sys_created_by>
        <sys_created_on>2019-08-19 05:50:03</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>2f4361e2db9f3f00b62a80e239961956</sys_id>
        <sys_mod_count>106</sys_mod_count>
        <sys_name>Wow Checkout Modal</sys_name>
        <sys_package display_value="Wow Portal" source="x_mono2_wow">c22adc75dba633400ef45682ca961996</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Wow Portal">c22adc75dba633400ef45682ca961996</sys_scope>
        <sys_update_name>sp_widget_2f4361e2db9f3f00b62a80e239961956</sys_update_name>
        <sys_updated_by>mono_se</sys_updated_by>
        <sys_updated_on>2019-09-03 09:21:46</sys_updated_on>
        <template><![CDATA[<div class="panel panel-default" sn-atf-blacklist="IS_SERVICE_CATALOG">
  <div class="panel-header">
    <h1 class="h3 title">
      {{::checkoutPopupTitle}}
    </h1>
    <i class="material-icons pull-right text-base" autofocus="true" tabindex="0" ng-click="c.cancel()" aria-label="Close modal">close</i>
  </div>
  <div ng-if="c.errorMessage" class="error-messages">
    {{c.errorMessage}}
  </div>
  <div class="panel-body">
    <div class="form-group">
      <div class="row">
        <div class="col-sm-8">
          <label for="requested-for">${wow_request_for} <i class="fa fa-info-circle" uib-tooltip="${wow_request_for_tooltip}" tooltip-placement="right" tooltip-append-to-body="true"></i></label>
          <sn-record-picker id="requested-for"
                            field="c.requestedFor"
                            table="'sys_user'"
                            display-field="'name'"
                            display-fields="c.data.reqForDispCols"
                            value-field="'sys_id'"
                            search-fields="c.data.reqForDispCols"
                            default-query="c.data.reqForQuery"
                            page-size="100"
                            options="{allowClear : false}"
                            sn-disabled="!c.data.disable_req_for">
          </sn-record-picker>
        </div>
        <div class="padder-v col-sm-12" ng-if="c.allowDeliveryAddress()">
          <label for="deliver-to" tabindex="0" aria-expanded="{{c.showDeliveryAddr}}">
            ${wow_delivery_information}
          </label>
          <textarea class="form-control" ng-model="c.deliverTo" id="deliver-to" ng-model-options="{ updateOn: 'blur' }" ng-change="c.changeShippingInfo()" rows="3"></textarea>
        </div>
        <div class="padder-b col-sm-12">
          <label for="primary-phone" tabindex="0">
            ${wow_preferred_telephone}
          </label>
          <input class="form-control" id="primary-phone" ng-model="c.primaryPhone" ng-model-options="{ updateOn: 'blur' }">
        </div>
        <div class="padder-b col-sm-12">
          <label for="telephone-number" tabindex="0">
            ${wow_secondary_telephone} <span class="text-muted">(${wow_optional})</span>
          </label>
          <input class="form-control" id="secondary-phone" ng-model="c.secondaryPhone" ng-model-options="{ updateOn: 'blur' }">
        </div>
        <div class="padder-b col-sm-12">
          <label for="email-address" tabindex="0">
            ${wow_preferred_email}
          </label>
          <input class="form-control" id="email-address" ng-model="c.emailAddress" ng-model-options="{ updateOn: 'blur' }">
        </div>
        <div class="padder-b col-sm-12">
          <label for="service-location" tabindex="0">
            ${wow_service_location}
          </label>
          <sn-record-picker id="service-location"
                            field="c.serviceLocation"
                            table="'cmn_location'"
                            display-field="'name'"
                            value-field="'sys_id'"
                            search-fields="'name,street,company,city,state,country,zip'"
                            default-query=""
                            page-size="100"
                            options="{allowClear : false}">
          </sn-record-picker>
        </div>
        <div class="padder-b col-sm-12">
          <label for="current-location" tabindex="0">
            ${wow_requestor_location}
          </label>
          <input class="form-control" id="current-location" ng-model="c.currentLocation" ng-model-options="{ updateOn: 'blur' }">
        </div>
        <div class="padder-b col-sm-12">
          <label for="contact-time" tabindex="0">
            ${wow_contact_time} <span class="text-muted">(${wow_optional})</span>
          </label>
          <textarea class="form-control" id="contact-time" ng-model="c.contactTime" ng-model-options="{ updateOn: 'blur' }" rows="3"></textarea>
        </div>
        <div class="padder-b col-sm-12" ng-class="{'padder-v': !c.allowDeliveryAddress()}">
          <label for="special-instructions" ng-click="c.showSpecialInstructions = !c.showSpecialInstructions" tabindex="0" aria-expanded="{{c.showSpecialInstructions}}">
            ${wow_special_instructions} <span class="text-muted">(${wow_optional})</span>
            <i ng-class="c.showSpecialInstructions ? 'fa fa-minus-square-o' : 'fa fa-plus-square-o'"  class="m-t-xs pull-left accordion-toggle"></i>
          </label>
          <textarea class="form-control" ng-if="c.showSpecialInstructions" ng-model="c.special_instructions" id="special-instructions" ng-model-options="{ updateOn: 'blur' }" ng-change="c.changeShippingInfo()" rows="3"></textarea>
        </div>
      </div>
    </div>
  </div>
  <div class="panel-footer clearfix">
    <div class="attachment-list" ng-if="c.data.action !== 'order_now'">
      <now-attachments-list template="sp_attachment_single_line" class="padder-b"></now-attachments-list>
    </div>
    <div>
      <label ng-if="c.data.action !== 'order_now'" style="font-weight:normal;cursor:pointer;" class="padding-top-s">
        <sp-attachment-button></sp-attachment-button>
        <span style="padding-left:4px;">${wow_add_attachments}</span>
      </label>
      <div class="pull-right">
        <button name="cancel" ng-disabled="c.checkoutInProgress" ng-click="c.cancel()" class="btn btn-default">${wow_cancel}</button>
        <button ng-disabled="!c.canCheckout()" name="submit" ng-click="c.triggerCheckout()" class="btn sc-btn btn-primary m-l-xs">
          <span ng-show="!c.checkoutInProgress">{{::checkOutMsg}}</span>
          <span ng-show="c.checkoutInProgress">${wow_submitting}</span>
        </button>
      </div>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
