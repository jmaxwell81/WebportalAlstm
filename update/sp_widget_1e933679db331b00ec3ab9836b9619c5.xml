<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $uibModal, $timeout, spUtil) {
	var c = this;

	var requestItem;
	var permissions;
	var modal;

	if (c.data.requestItem) {
		requestItem = $scope.requestItem = c.data.requestItem;
		permissions = $scope.permissions = c.data.permissions;

		$scope.activityFeed = c.data.activityFeed;
		$scope.markAsFavorite = c.data.markAsFavorite;
		
		spUtil.recordWatch($scope, 'sc_req_item', 'sys_id='+requestItem.id, function(r) {
			if (r.data.changes.length > 0) {
				for (var i = 0; i < r.data.changes.length; i++) {
					// if we have one change that isn't just comments then reload the request
					if (r.data.changes[i] != 'comments') {
						update();
						break;
					}
				}
			}
		});
	}

	$scope.hasActions = function() {
		for (var key in permissions) {
			if (permissions[key])
				if (key != 'canChase' || (key == 'canChase' && !$scope.hasChased))
					return true;
		}

		return false;
	}

	// ngClick action to chase the request
	$scope.chaseRequest = function() {
		openModal('wowChaseRequest.html', 'wow-chase-request');
	}

	$scope.confirmChaseRequest = function() {
		if (!hasComments())
			return spUtil.addErrorMessage("${wow_invalid_comments_min_length_[0]}".replace('[0]', c.options.minCommentsLength));

		if (permissions.canChase) {
			$scope.chasing = true;

			performAction('chase', function() {
				if (c.data.sla.hasBreached) {
					var timeout = $timeout(function() {
						$scope.chasing = false;
						$timeout.cancel(timeout);
					}, 500); // add little timeout to feel slicker
				}

				else
					closeModal();
				
				$scope.hasChased = true;
			})
		}
	}

	// ngClick action to accept the resolution of the request
	$scope.acceptResolution = function() {
		if (permissions.canAcceptResolution)
			performAction('accept_resolution', closeModal);
	}
	
	// ngClick action to reject the resolution of the request
	$scope.alstomRejectResolution = function() {
		if (permissions.canRejectResolution) {
			redirect('alstom_reject_resolution');
		}
	}

	// ngClick action to reject the resolution of the request
	$scope.rejectResolution = function() {
		openModal('wowRejectRequestResolution.html', 'wow-reject-request-resolution');
	}

	$scope.confirmRejectResolution = function() {
		if (!hasComments())
			return spUtil.addErrorMessage("${wow_invalid_comments_min_length_[0]}".replace('[0]', c.options.minCommentsLength));

		if (permissions.canRejectResolution) {
			performAction('reject_resolution', closeModal);
		}
	}

	// ngClick action to cancel the request
	$scope.cancelRequest = function() {
		openModal('wowCancelRequest.html', 'wow-cancel-request');
	}

	$scope.confirmCancelRequest = function($event) {
		if (!hasComments())
			return spUtil.addErrorMessage("${wow_invalid_comments_min_length_[0]}".replace('[0]', c.options.minCommentsLength));

		if (permissions.canCancel) {
			performAction('cancel', closeModal);
		}
	}

	$scope.showActivityModal = function(event) {
		$scope.modal = $uibModal.open({
			appendTo: $($scope.widgetEl),
			templateUrl: 'wowActivityModal.html',
			scope: $scope
		});

		// catch dismiss event (esc key or outside modal click)
		$scope.modal.result.then(function() {}, function () {
			c.data.activityFeed.data.mergedEntries = [];
		});
	}

	$scope.closeActivityModal = function () {
		$scope.modal.close();

		// catch close event
		$scope.modal.result.then(function () {
			c.data.activityFeed.data.mergedEntries = [];
		});
	}

	function redirect(action) {
		//Alstom have a task_survey redirect which uses expert_shell
		c.server.get({
			action: action
		}).then(function(r) {
			if (r.data.survey_url!=''){
				var url = r.data.survey_url;

				var viewPath = r.data.survey_url;
				var currentPath = window.location.href.substr(0, window.location.href.indexOf('/wow') + 1);

				var fullPath = currentPath + viewPath;
								
				window.open(fullPath, '_self');
				data.survey_url = '';				
				
			}
		});
	}
	
	function performAction(action, callback) {
		if ($scope.updating)
			return;

		$scope.updating = true;

		c.server.get({
			action: action,
			comments: c.data.comments
		}).then(function(r) {
			if (r.data.requestItem)
				requestItem = $scope.requestItem = r.data.requestItem;

			if (r.data.permissions)
				permissions = $scope.permissions = r.data.permissions;

			if (r.data.success)
				spUtil.addInfoMessage(r.data.message || "${wow_request_updated}");

			else
				spUtil.addErrorMessage("${wow_request_update_error}");

			$scope.updating = false;
			resetComments(); // reset comments after submission
			callback();
		});
	}
	
	function update() {
		c.server.update().then(function() {
			if (c.data.requestItem)
				requestItem = $scope.requestItem = c.data.requestItem;

			if (c.data.permissions)
				permissions = $scope.permissions = c.data.permissions;
		});
	}

	var openModal = $scope.openModal = function(template, windowClass) {
		var modalOptions = {
			appendTo: $scope.widgetEl,
			templateUrl: template,
			scope: $scope
		};

		if (windowClass)
			modalOptions.windowClass = windowClass;

		modal = $uibModal.open(modalOptions);
	}

	var closeModal = $scope.closeModal = function() {
		if (modal)
			modal.close();
	}

	var hasComments = $scope.hasComments = function() {
		return c.data.comments && c.data.comments.length >= c.options.minCommentsLength;
	}

	var resetComments = function() {
		c.data.comments = "";
	}

	$scope.launchChat = function() {
		closeModal();
		$rootScope.$broadcast('wow_launch_chat');
	}

}]]></client_script>
        <controller_as>c</controller_as>
        <css>$widgets-width: 380px;
$aside-tablet-width: 260px; // tablet width variable for aside added

@include wow-panel();
@include wow-ticket-layout();
@include wow-modal(600px);

.btn {
  @include wow-button();
}

main {
  @media screen and ( max-width: $screen-md-min) {
    flex-direction: column;

    &gt;.details {
      width: 100%;
    }
  }
}

aside {
  max-width: $widgets-width;

  @media screen and (max-width: $screen-md-min) {
    max-width: 100%;
    margin-left: 0;
  }

  .activity-feed {
    @include wow-mini-feed();

    .activity-btn {
      margin-bottom: 1rem;
      width: 100%;

      i {
        color: inherit;
        font-size: 1.5rem;
        margin-left: .5rem;
      }
    }
  }
}

.details {
  .subtitle {
    margin-bottom: 2rem;
    margin-top: 0;
    width: 100%;
  }

  .activity-feed {
    margin-top: 5rem;

    .activity {
      margin-top: -2rem;
    }
  }
}

.product {
  border: 1px solid darken($panel-bg, 7%);
  border-top-left-radius: $border-radius;
  border-top-right-radius: $border-radius;
  border-bottom: none;
  padding: 1rem;
}

.item-table {
  display:flex;

  .device-column {
    flex:1.2;

    h5 {
      @media screen and (max-width: $screen-xs-max) {
        display: none;
      }
    }

    .device {
      @media screen and (min-width: $screen-xs-max) and (max-width: $screen-md-min) {
        flex-direction: row;

        .details {
          margin-top: 0;
        }
      }
    }

  }

  .price-column, .qty-column {
    flex: 0.15;

    h5, p {
      text-align: center;
    }

    h5 {
      @media screen and (max-width: $screen-xs-max) {
        font-size: .9rem;
        font-weight: 500;
        text-transform: unset;
      }
    }
  }

  @media screen and (max-width: $screen-md-min) {
    flex-direction:row;
    .price-column, .qty-column {
      h5, p {
        text-align:left;
      }
    }
  }

  @media screen and (max-width: $screen-xs-max) {
    flex-direction: column;
  }
}

.table {
  tr {
    display:flex;

    @media screen and (max-width: $screen-xs-max) {
      &amp;.item-row {
        position: relative;
      }
    }
  }

  th, h5 {
    color: $text-muted;
    text-transform: uppercase;
    font-size: 0.9rem;
    font-weight: 300;
    padding-bottom: 1rem;

    @media screen and (max-width: $screen-md) {
      padding-bottom: 0;
    }
  }

  td, th {
    &amp;:first-child {
      flex:10;
      text-align:left;

      @media screen and (max-width: $screen-md) {
        flex: 4;
      }

      @media screen and (max-width: $screen-xs-max) {
        flex: 5;
      }

      @media screen and (max-width: $screen-xs) {
        flex: 2;
      }
    }

    flex: 1;
    border: none;
    text-align: center;
  }

  td {
    padding-top: 1rem;
  }

  h3 {
    font-weight: 400;
    font-size: 1.5rem;
    margin: 0 0 1.5rem;
  }
}

.summary {
  align-items: center;
  background-color: darken($panel-bg, 5%);
  border-bottom-left-radius: $border-radius;
  border-bottom-right-radius: $border-radius;
  display: flex;
  justify-content: space-between;
  padding: 1.5rem;

  label {
    color: $text-muted;
    margin: 0;
  }

  span {
    margin-left: 0.5rem;

    @media screen and (max-width: $screen-md-min) {
      display: block;
      margin-left: 0;
    }
  }
}

.device {
  display: flex;
  align-items: flex-start;

  @media screen and (max-width: $screen-md) {
    flex-direction: column;
    align-items: flex-start;
  }

  @media screen and (max-width: $screen-xs-max) {
    @include wow-item-image(100px) {
      justify-content: center;
      margin-bottom: .5rem;
      margin-top: .5rem;
    }
  }

  @media screen and (min-width: $screen-sm-min) {
    @include wow-item-image(140px) {
      justify-content: center;
      margin-right: 2rem;
    }
  }

  // responsive for mobile and tablet added
  .details {
    @media screen and (max-width: $screen-md-min) {
      margin-top: 1rem;
    }
  }
}

.variables {
  @include wow-variables();
}

.actions {
  margin-bottom: 3rem;

  .btn {
    @include wow-button();
    margin-bottom: 1rem;
    width: 100%;

    +div {
      margin-top: 2rem;
    }
  }
}

.other-items {
  display: flex;
  flex-wrap: wrap;
  margin-top: 5rem;

  .other-item {
    align-items: center;
    border: 1px solid darken($panel-bg, 10%);
    border-radius: 5px;
    display: inline-flex;
    justify-content: center;
    padding: 0;
    margin-bottom: 2rem;
    margin-right: 2rem;
    width: calc(33.33% - 2rem);

    @media screen and (max-width: $screen-xs-max) {
      width: 100%;
      margin: 0 0 1rem 0;
    }

    a {
      display: flex;
      align-items: center;
      flex-direction: column;
      padding: 2rem;
      text-align: center;
      word-break: normal;
      width: 100%;

      &amp;, &amp;:hover, &amp;:active, &amp;:focus {
        color: $text-color;
      }

      @media screen and (max-width: $screen-md-min) {
        flex-direction: row;
        padding: 1rem;
        width: 100%;
      }
    }

    span {
      display: flex;
      justify-content: flex-start;
      width: 100%;

      @media screen and (min-width: $screen-md-min) {
        justify-content: center;
      }
    }

    @media screen and (max-width: $screen-xs-max) {
      @include wow-item-image(50px);
    }

    @media screen and (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
      @include wow-item-image(80px);
    }

    @media screen and (min-width: $screen-md-min) {
      @include wow-item-image(100px);
    }

    wow-item-image {
      align-items: center;
      justify-content: center;

      @media screen and (max-width: $screen-sm-max) {
        margin-right: 1rem;
      }

      @media screen and (min-width: $screen-md-min) {
        margin-bottom: 1rem;
      }

      .picture {
        background-position: 50%;
      }
    }
    }
  }
}

@include wow-modal();

.modal {
  text-align: center;

  .modal-header {
    height: 1rem;
  }

  .modal-body {
    align-items: center;
    display: flex;
    flex-direction: column;

    h4 {
      width: 100%;
    }
  }

  textarea {
    margin: .5rem 0;
    min-height: 80px;
  }

  .modal-footer {
    align-items: center;
    border: none;
    display: flex;
    flex-direction: column;
    padding: 0;

    .btn {
      @include wow-button();

      &amp;:not(.cancel) {
        padding: 1em 2em;
      }
    }

    .cancel {
      margin-bottom: -.5rem;
    }
  }
}

.wow-chase-request {
  @include wow-spinner($brand-primary, 40px) {
    display: block; // height issue with inline-flex
    
    .spinner {
      margin-bottom: 3rem;
      margin-top: 3rem;
    }
  }
  
  .sla-notice {
    align-items: center;
    display: flex;
    margin-bottom: 1rem;
    margin-top: 1rem;
    
    i {
      margin-right: .5em;
    }
  }
  
  .launch-chat {
    align-items: center;
    display: flex;
    flex-direction: column;
    margin-bottom: 1rem;

    .btn {
      @include wow-button();
      margin-top: 1rem;
      padding: 1em 2em;
    }
  }
}

// embedded widgets

.workflow-stages {
  margin-bottom: 2rem;

  @media screen and (max-width: $screen-md-min) {
    margin-top: 4rem;
  }

  .wow-workflow-progress {
    @include wow-list-reset();
    display: flex;
    flex-direction: column;

    li {
      align-items: center;
      display: flex;
      font-weight: 500;
      margin: .75rem 0;

      .icon {
        align-items: center;
        display: inline-flex;
        margin-right: .5rem;
      }

      i {
        font-size: 2em;

        &amp;.complete {
          color: $brand-success;
        }

        &amp;.rejected {
          color: $brand-danger;
        }

        &amp;.active {
          color: $brand-info;
        }
      }

      .description {
        display: flex;
        flex: 1;
        flex-direction: column;

        .state {
          color: $text-muted;
        }
      }
    }
  }
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description>Copyright Monochrome Ltd</description>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>wow-request-item</id>
        <internal>false</internal>
        <link><![CDATA[function (scope, widgetEl) {
	scope.widgetEl = widgetEl;
}]]></link>
        <name>Wow Request Item</name>
        <option_schema>[{"name":"activityModal","section":"Presentation","label":"Show activity feed in modal?","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	options.minCommentsLength = 5;

	var table = $sp.getParameter('table');
	var sys_id = $sp.getParameter('sys_id');
	var requestItem;

	var util = new WowUtil();
	var ticketsHelper = new WowTickets();
	var searchHelper = new WowSearch();

	if (table == 'sc_request') {
		requestItem = getFirstItemInRequest(sys_id);
		sys_id = requestItem.id;
	}

	else
		requestItem = ticketsHelper.getRequest(sys_id);

	if (!requestItem)
		return;

	var taskHelper = new WowTask({
		sys_id: sys_id,
		table: 'sc_req_item'
	});

	if (input) {
		switch (input.action) {
			case 'chase':
				if (taskHelper.hasBreachedSLA()) {
					data.success = taskHelper.chaseTask(input.comments);
				}
				
				else {
					data.success = taskHelper.addComments(input.comments);
				}
				
				data.message = gs.getMessage('wow_request_chased');
				break;

			case 'accept_resolution':
				data.success = taskHelper.acceptResolution();
				data.message = gs.getMessage('wow_request_resolution_accepted');
				break;

			case 'alstom_reject_resolution':

				data.sys_id = input.sys_id || $sp.getParameter("sys_id");
							
				// Valid GlideRecord
				gr = new GlideRecord('sc_req_item');
				if (!gr.isValid())
					return;

				// Valid sys_id
				if (!gr.get(data.sys_id))
					return;
				var gr1 = new GlideRecord('task_survey');
				gr1.addQuery('task',gr.sys_id);
				gr1.addQuery('sent_to',gs.getUserID());
				gr1.addQuery('state','requested');
				gr1.query();
				if(gr1.next()){
				
	data.survey_url ='expert_shell.do?sysparm_sys_id='+gr1.survey_wizard+'&sysparm_task_survey='+ gr1.sys_id;
				}	
				break;
			
			case 'reject_resolution':
				data.success = taskHelper.rejectResolution(input.comments);
				data.message = gs.getMessage('wow_request_resolution_rejected');
				return;

			case 'cancel':
				data.success = taskHelper.cancelTask(input.comments);
				data.message = gs.getMessage('wow_request_cancelled');
				break;
		}

		// get updated request item
		requestItem = ticketsHelper.getRequest(sys_id);
	}

	options.activityModal = options.activityModal == 'true';

	data.requestItem = requestItem;
	data.otherItems = otherRequestItems(requestItem.request.value, requestItem.id);
	data.catItem = searchHelper.getCatalogItem(requestItem.item);
	data.permissions = taskHelper.getPermissions();
	data.sla = {
		hasBreached: taskHelper.hasBreachedSLA()
	};
	
	if (!input) {
		data.activityFeed = $sp.getWidget('wow-activity-feed', {
			sys_id: requestItem.id,
			table: 'sc_req_item'
		});

		data.markAsFavorite = $sp.getWidget('wow-mark-favorite', {
			sys_id: sys_id
		});
	}

	var workflowStages = $sp.getWidget('request_item_workflow_stages', {
		onload_expand_request_item_stages: 'true',
		req_item_id: requestItem.id
	});

	// replace OOTB template with custom template
	workflowStages.template = util.getTemplate('wowWorkflowStages.html');
	data.workflowStages = workflowStages;


	function getFirstItemInRequest(requestId) {
		var gr = new GlideRecord('sc_req_item');

		if (gs.tableExists('x_mono2_multiform_request')) {
			var multiformHelper = new MultiformHelper();
			var multiformRequest = multiformHelper.getRecord('x_mono2_request', requestId);

			if (multiformRequest)
				gr.addQuery('cat_item', multiformRequest.parent);
		}

		gr.addQuery('request', 'IN', requestId);
		gr.orderBy('number');
		gr.query();

		while (gr.next())
			return ticketsHelper.getRequestVariables(gr);

		return null;
	}


	function otherRequestItems(requestId, current) {
		var requests = [];
		var items = [];

		var gr = new GlideRecord('sc_req_item');
		gr.addQuery('request', 'IN', requestId);
		gr.addQuery('sys_id', 'NOT IN', current);
		gr.query();

		while (gr.next()) {
			requests.push(ticketsHelper.getRequestVariables(gr));
		}

		requests.forEach(function(req) {
			var item = searchHelper.getCatalogItem(req.item);
			item.href = req.href;
			items.push(item);
			return;
		});

		return items;
	}


})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>elgarsi</sys_created_by>
        <sys_created_on>2018-08-09 07:54:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>1e933679db331b00ec3ab9836b9619c5</sys_id>
        <sys_mod_count>737</sys_mod_count>
        <sys_name>Wow Request Item</sys_name>
        <sys_package display_value="Wow Portal" source="x_mono2_wow">c22adc75dba633400ef45682ca961996</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Wow Portal">c22adc75dba633400ef45682ca961996</sys_scope>
        <sys_update_name>sp_widget_1e933679db331b00ec3ab9836b9619c5</sys_update_name>
        <sys_updated_by>DI</sys_updated_by>
        <sys_updated_on>2020-03-16 08:57:21</sys_updated_on>
        <template><![CDATA[<div class="panel">
	<section ng-if="requestItem" class="wow-request-item">

    <sp-widget widget='data.markAsFavorite'></sp-widget>

    <h1>${wow_item_in_request} <span>#{{requestItem.number}}</span></h1>

    <ul class="info">
      <li>
        <label>${wow_created}:</label>
        <span>{{requestItem.opened | wowDate}}</span>
      </li>
      <li>
        <label>${wow_estimated_completion}:</label>
        <span>{{requestItem.due | wowDate}}</span>
      </li>
      <li ng-if="requestItem.state">
        <label>${wow_status}:</label>
        <span>{{requestItem.state}}</span>
      </li>
      <li ng-if="requestItem.subStatus">
        <label>${wow_substate}:</label>
        <span>{{requestItem.subStatus}}</span>
      </li>
    </ul>

    <ul class="info last">
      <li ng-if="requestItem.assignmentGroup">
        <label>${wow_assignment_group}:</label>
        <span>{{requestItem.assignmentGroup}}</span>
      </li>

      <li ng-if="requestItem.assignedTo">
        <label>${wow_assigned_to}:</label>
        <span>{{requestItem.assignedTo}}</span>
      </li>

      <li ng-if="requestItem.teamManager">
        <label>${wow_team_manager}:</label>
        <span>{{requestItem.teamManager}}</span>
      </li>
    </ul>

    <main>
      <div class="details">

        <div class="product">
          <div class="table item-table">
            <div class="device-column">
              <h5>${wow_product}</h5>
              <div class="device">
                <wow-item-image item="data.catItem"></wow-item-image>
                <div class="details">
                  <h3>{{requestItem.description}}</h3>
                  <ul class="variables">
                    <li ng-repeat="variable in requestItem.variables" ng-hide="variable.display_value == 'false'">
                      <div ng-switch="variable.display_value">
                        <div ng-switch-when="true" ng-style="variable.display_value && {'flex-direction':'row'}">
                          <i class="material-icons check">check</i>{{variable.label}}
                        </div>
                        <div ng-switch-default>
                          <label>{{variable.label}}</label>
                          <span>{{variable.display_value}}</span>
                        </div>
                      </div>
                    </li>
                  </ul>
                </div>
              </div>
            </div>

            <div ng-if="requestItem.price" class="price-column">
              <h5>Price</h5>
              <p class="text-nowrap">{{requestItem.price}}</p>
            </div>

            <div ng-if="requestItem.quantity" class="qty-column">
              <h5>Qty</h5>
              <p>{{requestItem.quantity}}</p>
            </div>
          </div>

        </div>

        <div class="summary">
          <div>
            <label>${wow_state}:</label>
            <span>{{requestItem.state}}</span>
          </div>
        </div>

        <div class="activity-feed" ng-if="!options.activityModal">
          <h3 class="subtitle">${wow_activity_feed}</h3>
          <sp-widget widget="activityFeed"></sp-widget>
        </div>

        <div ng-if="data.otherItems.length > 0" class="other-items">
          <h3 class="subtitle">${wow_other_request_items}</h3>
          <div ng-repeat="otherItem in data.otherItems" class="other-item">
            <a href="{{otherItem.href}}">
              <wow-item-image item="otherItem"></wow-item-image>
              <span>{{otherItem.label}}</span>
            </a>
          </div>
        </div>

      </div>
      <aside>

        <div class="actions" ng-if="hasActions()">
          <button ng-if="permissions.canChase && !hasChased" ng-click="chaseRequest()" ng-disabled="updating" class="btn btn-info btn-chase">
            <i class="material-icons">schedule</i>
            ${wow_chase_request}
          </button>

          <button ng-if="permissions.canAcceptResolution" ng-click="acceptResolution()" ng-disabled="updating" class="btn btn-success btn-accept-resolution">
            <i class="material-icons">check_circle</i>
            ${wow_accept_resolution}
          </button>

          <!--button ng-if="permissions.canRejectResolution" ng-click="rejectResolution()" ng-disabled="updating" class="btn btn-danger btn-reject-resolution"-->
          <button ng-if="permissions.canRejectResolution" ng-click="alstomRejectResolution()" ng-disabled="updating" class="btn btn-danger btn-reject-resolution">
            <i class="material-icons">error</i>
            ${wow_reject_resolution}
          </button>

          <button ng-if="permissions.canCancel" ng-click="cancelRequest()" ng-disabled="updating" class="btn btn-default btn-cancel">
            <i class="material-icons">cancel</i>
            ${wow_cancel_request}
          </button>
        </div>

        <div class="workflow-stages">
          <h3>${wow_progress}</h3>
          <sp-widget widget="data.workflowStages"></sp-widget>
        </div>

        <div class="activity-feed" ng-if="options.activityModal">
          <button class="btn btn-default activity-btn" ng-click="showActivityModal()">
            ${wow_show_activity}
            <i class="material-icons">notifications_active</i>
          </button>
          <button class="btn btn-info activity-btn" ng-click="showActivityModal()">
            ${wow_add_comments}
            <i class="material-icons">comment</i>
          </button>
        </div>

      </aside>
    </main>

  </section>

  <section ng-if="!requestItem">
    ${wow_no_record}
  </section>

</div>]]></template>
    </sp_widget>
</record_update>
